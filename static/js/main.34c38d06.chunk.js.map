{"version":3,"sources":["components/Cell/Cell.jsx","components/Grid/Grid.jsx","components/App.jsx","index.js"],"names":["Cell","props","customStyle","Number","index","size","gridColumnStart","gridColumnEnd","className","onMouseDown","event","value","mdhandle","onMouseUp","muphandle","style","Grid","gridLength","useState","array","initialFill","i","arr","push","result","length","r","Math","floor","random","unshift","splice","checkWin","pressed","state","setState","slice","horizontal","idx","j","diff","setStatus","display","gridTemplateRows","gridTemplateColumns","renderElement","item","key","id","prev","handleMousePressed","p","temp","handleMouseReleased","map","App","status","ReactDOM","render","document","getElementById"],"mappings":"6PAkCeA,MA/Bf,SAAcC,GAWZ,IAAIC,EAAc,GAQlB,OAPIC,OAAOF,EAAMG,SAAWD,OAAOF,EAAMI,MAAQF,OAAOF,EAAMI,QAC5DH,EAAc,CACZI,gBAAgB,GAAD,OAAKH,OAAOF,EAAMI,OACjCE,cAAc,GAAD,OAAKJ,OAAOF,EAAMI,MAAQ,KAKzC,yBACEG,UAAU,YACVC,YAAa,SAAAC,GApBK,OAAhBT,EAAMU,OACVV,EAAMW,SAASX,EAAMG,QAoBnBS,UAAW,SAAAH,GAhBO,OAAhBT,EAAMU,OACVV,EAAMa,UAAUb,EAAMG,QAgBpBW,MAAOb,GAEND,EAAMU,Q,MCsFEK,MA7Gf,SAAcf,GACZ,IAAMgB,EAAad,OAAOF,EAAMI,MAAQF,OAAOF,EAAMI,MAAQ,EAD1C,EAEOa,mBAAS,CACjCC,MAiEF,SAASC,IACP,IACIC,EADEC,EAAM,GAEZ,IAAKD,EAAI,EAAGA,EAAIJ,EAAa,EAAGI,IAAKC,EAAIC,KAAKF,EAAI,GAClD,IAAIG,EAAS,GACbA,EAAOD,KAAKF,EAAI,GAChBG,EAAOD,KAAK,MACZ,KAAsB,IAAfD,EAAIG,QAAc,CACvB,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWP,EAAIG,QACvCD,EAAOM,QAAQR,EAAII,IACnBJ,EAAIS,OAAOL,EAAG,GAEhB,OAAIM,EAASR,GAAgBJ,IACtBI,EA9EAJ,GACPa,QAAS,OAJQ,mBAEZC,EAFY,KAELC,EAFK,KAOfX,EAASQ,IAwCb,SAASA,IAAsB,IAAbV,EAAY,uDAAN,KACV,OAARA,IAAcA,EAAMY,EAAMf,MAAMiB,SAEpC,IADA,IAAIC,GAAa,EACRhB,EAAI,EAAGA,EAAIJ,EAAa,EAAGI,IAClC,GAAIA,EAAI,IAAMC,EAAID,GAAI,CACpBgB,GAAa,EACb,MAGJ,GAAIA,EAAY,OAAO,EACvB,IAAK,IAAIhB,EAAI,EAAGA,EAAIlB,OAAOF,EAAMI,MAAOgB,IAAK,CAC3C,IAAIiB,EAAMjB,EAAIlB,OAAOF,EAAMI,MAC3B,GAAIiB,EAAIgB,KAASjB,EAAI,EAAG,OAAO,EAC/B,IAAK,IAAIkB,EAAID,EAAM,EAAGC,EAAID,EAAMnC,OAAOF,EAAMI,MAAOkC,IAAK,CACvD,IAAIC,EAAOlB,EAAIiB,GAAKjB,EAAIiB,EAAI,GAC5B,GAAIC,IAASrC,OAAOF,EAAMI,MAAO,OAAO,GAG5C,OAAO,EAzDLmB,GACFvB,EAAMwC,UAAU,aA0ElB,IAAMvC,EAAc,CAClBwC,QAAS,OACTC,iBAAiB,UAAD,OAAYxC,OAAOF,EAAMI,MAAQ,EAAjC,YAChBuC,oBAAoB,UAAD,OAAY3C,EAAMI,KAAlB,aAGrB,SAASwC,EAAcC,EAAM1C,GAC3B,OACE,kBAAC,EAAD,CACE2C,IAAK3C,EACLO,MAAOmC,EACP1C,MAAOA,EACPQ,SAAU,SAAAoC,GAAE,OAnFlB,SAA4B5C,GACtBoB,GACJW,GAAS,SAAAc,GACP,OAAO,eAAKA,EAAZ,CAAkBhB,QAAS9B,OAAOC,QAgFhB8C,CAAmBF,IACnClC,UAAW,SAAAkC,GAAE,OA7EnB,SAA6B5C,GAC3B,IAAIoB,GACiB,MAAjBU,EAAMD,QAAV,CACA,IAAIkB,EAAIjB,EAAMD,QACVP,EAAIvB,OAAOC,GAEbsB,IAAMyB,EAAI,GACVzB,IAAMyB,EAAI,GACVzB,IAAMyB,EAAIhD,OAAOF,EAAMI,OACvBqB,IAAMyB,EAAIhD,OAAOF,EAAMI,MAEvB8B,GAAS,SAAAc,GACP,IAAI3B,EAAM2B,EAAK9B,MAAMiB,QACjBgB,EAAO9B,EAAI6B,GAGf,OAFA7B,EAAI6B,GAAK7B,EAAII,GACbJ,EAAII,GAAK0B,EACF,eAAKH,EAAZ,CAAkB9B,MAAOG,OAG3Ba,GAAS,SAAAc,GACP,OAAO,eACFA,EADL,CAEEhB,QAAS,WAuDMoB,CAAoBL,IACrC3C,KAAMJ,EAAMI,OAKlB,OACE,yBAAKG,UAAU,iBAAiBO,MAAOb,GACpCgC,EAAMf,MAAMmC,KAAI,SAACR,EAAM1C,GAAP,OAAiByC,EAAcC,EAAM1C,QChG7CmD,MAXf,WAAgB,IAAD,EACerC,mBAAS,MADxB,mBACNsC,EADM,KACEf,EADF,KAGb,OACE,yBAAKjC,UAAU,aACb,kBAAC,EAAD,CAAMH,KAAK,IAAIoC,UAAWA,IAC1B,yBAAKjC,UAAU,UAAUgD,K,MCJ/BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.34c38d06.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\nfunction Cell(props) {\n  function mouseDownHandler(event) {\n    if (props.value === null) return;\n    props.mdhandle(props.index);\n  }\n\n  function mouseUpHandler(event) {\n    if (props.value !== null) return;\n    props.muphandle(props.index);\n  }\n\n  let customStyle = {};\n  if (Number(props.index) === Number(props.size) * Number(props.size)) {\n    customStyle = {\n      gridColumnStart: `${Number(props.size)}`,\n      gridColumnEnd: `${Number(props.size) + 1}`\n    };\n  }\n\n  return (\n    <div\n      className=\"grid-cell\"\n      onMouseDown={event => mouseDownHandler(event)}\n      onMouseUp={event => mouseUpHandler(event)}\n      style={customStyle}\n    >\n      {props.value}\n    </div>\n  );\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport \"./Grid.css\";\n\n/* TODO RESET LOGIC && GAME UI */\n\nfunction Grid(props) {\n  const gridLength = Number(props.size) * Number(props.size) + 1;\n  const [state, setState] = useState({\n    array: initialFill(),\n    pressed: null\n  });\n\n  let result = checkWin();\n  if (result) {\n    props.setStatus(\"You Win!!\");\n  }\n\n  function handleMousePressed(index) {\n    if (result) return;\n    setState(prev => {\n      return { ...prev, pressed: Number(index) };\n    });\n  }\n\n  function handleMouseReleased(index) {\n    if (result) return;\n    if (state.pressed == null) return;\n    let p = state.pressed;\n    let r = Number(index);\n    if (\n      r === p - 1 ||\n      r === p + 1 ||\n      r === p - Number(props.size) ||\n      r === p + Number(props.size)\n    ) {\n      setState(prev => {\n        let arr = prev.array.slice();\n        let temp = arr[p];\n        arr[p] = arr[r];\n        arr[r] = temp;\n        return { ...prev, array: arr };\n      });\n    } else {\n      setState(prev => {\n        return {\n          ...prev,\n          pressed: null\n        };\n      });\n    }\n  }\n\n  function checkWin(arr = null) {\n    if (arr === null) arr = state.array.slice();\n    let horizontal = true;\n    for (let i = 0; i < gridLength - 1; i++) {\n      if (i + 1 !== arr[i]) {\n        horizontal = false;\n        break;\n      }\n    }\n    if (horizontal) return true;\n    for (let i = 0; i < Number(props.size); i++) {\n      let idx = i * Number(props.size);\n      if (arr[idx] !== i + 1) return false;\n      for (let j = idx + 1; j < idx + Number(props.size); j++) {\n        let diff = arr[j] - arr[j - 1];\n        if (diff !== Number(props.size)) return false;\n      }\n    }\n    return true;\n  }\n\n  function initialFill() {\n    const arr = [];\n    let i;\n    for (i = 0; i < gridLength - 2; i++) arr.push(i + 1);\n    let result = [];\n    result.push(i + 1);\n    result.push(null);\n    while (arr.length !== 0) {\n      let r = Math.floor(Math.random() * arr.length);\n      result.unshift(arr[r]);\n      arr.splice(r, 1);\n    }\n    if (checkWin(result)) return initialFill();\n    return result;\n  }\n  const customStyle = {\n    display: \"grid\",\n    gridTemplateRows: `repeat(${Number(props.size) + 1}, 100px)`,\n    gridTemplateColumns: `repeat(${props.size}, 100px)`\n  };\n\n  function renderElement(item, index) {\n    return (\n      <Cell\n        key={index}\n        value={item}\n        index={index}\n        mdhandle={id => handleMousePressed(id)}\n        muphandle={id => handleMouseReleased(id)}\n        size={props.size}\n      />\n    );\n  }\n\n  return (\n    <div className=\"grid-container\" style={customStyle}>\n      {state.array.map((item, index) => renderElement(item, index))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React, { useState } from \"react\";\nimport Grid from \"./Grid/Grid\";\n\nfunction App() {\n  const [status, setStatus] = useState(null);\n\n  return (\n    <div className=\"container\">\n      <Grid size=\"2\" setStatus={setStatus} />\n      <div className=\"status\">{status}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
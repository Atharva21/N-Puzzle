{"version":3,"sources":["components/Cell/Cell.jsx","components/Grid/Grid.jsx","components/App.jsx","index.js"],"names":["Cell","props","customStyle","Number","index","size","gridColumnStart","gridColumnEnd","className","onMouseDown","event","value","mdhandle","onMouseUp","muphandle","style","Grid","gridLength","useState","array","initialFill","pressed","state","setState","checkWin","arr","slice","horizontal","i","idx","j","diff","push","result","length","r","Math","floor","random","unshift","splice","prev","display","gridTemplateRows","gridTemplateColumns","renderElement","item","key","id","handleMousePressed","p","temp","winstate","handleMouseReleased","map","App","statusStyle","gridSize","winState","type","orient","min","max","onChange","evt","target","console","log","onRangeChanged","name","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e86cc8e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\nfunction Cell(props) {\n  function mouseDownHandler(event) {\n    if (props.value === null) return;\n    props.mdhandle(props.index);\n  }\n\n  function mouseUpHandler(event) {\n    if (props.value !== null) return;\n    props.muphandle(props.index);\n  }\n\n  let customStyle = {};\n  if (Number(props.index) === Number(props.size) * Number(props.size)) {\n    customStyle = {\n      gridColumnStart: `${Number(props.size)}`,\n      gridColumnEnd: `${Number(props.size) + 1}`\n    };\n  }\n\n  return (\n    <div\n      className=\"grid-cell\"\n      onMouseDown={event => mouseDownHandler(event)}\n      onMouseUp={event => mouseUpHandler(event)}\n      style={customStyle}\n    >\n      {props.value}\n    </div>\n  );\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport \"./Grid.css\";\n\n/* TODO RESET LOGIC && GAME UI */\n\nfunction Grid(props) {\n  const gridLength = Number(props.size) * Number(props.size) + 1;\n  // const [propsState, setPropsState] = useState(props);\n  const [state, setState] = useState({\n    array: initialFill(),\n    pressed: null\n  });\n\n  if (state.array.length !== gridLength) {\n    setState(prev => {\n      return {\n        ...prev,\n        array: initialFill()\n      };\n    });\n  }\n\n  function handleMousePressed(index) {\n    if (checkWin()) return;\n    setState(prev => {\n      return { ...prev, pressed: Number(index) };\n    });\n  }\n\n  function handleMouseReleased(index) {\n    if (checkWin()) return;\n    if (state.pressed == null) return;\n    let p = state.pressed;\n    let r = Number(index);\n    if (\n      r === p - 1 ||\n      r === p + 1 ||\n      r === p - Number(props.size) ||\n      r === p + Number(props.size)\n    ) {\n      let result;\n      setState(prev => {\n        let arr = prev.array.slice();\n        let temp = arr[p];\n        arr[p] = arr[r];\n        arr[r] = temp;\n        result = checkWin(arr);\n        if (result) {\n          props.winstate();\n        }\n        return { ...prev, array: arr };\n      });\n    } else {\n      setState(prev => {\n        return {\n          ...prev,\n          pressed: null\n        };\n      });\n    }\n  }\n\n  function checkWin(arr = null) {\n    if (arr === null) arr = state.array.slice();\n    let horizontal = true;\n    for (let i = 0; i < gridLength - 1; i++) {\n      if (i + 1 !== arr[i]) {\n        horizontal = false;\n        break;\n      }\n    }\n    if (horizontal) return true;\n    for (let i = 0; i < Number(props.size); i++) {\n      let idx = i * Number(props.size);\n      if (arr[idx] !== i + 1) return false;\n      for (let j = idx + 1; j < idx + Number(props.size); j++) {\n        let diff = arr[j] - arr[j - 1];\n        if (diff !== Number(props.size)) return false;\n      }\n    }\n    return true;\n  }\n\n  function initialFill() {\n    const arr = [];\n    let i;\n    for (i = 0; i < gridLength - 2; i++) arr.push(i + 1);\n    let result = [];\n    result.push(i + 1);\n    result.push(null);\n    while (arr.length !== 0) {\n      let r = Math.floor(Math.random() * arr.length);\n      result.unshift(arr[r]);\n      arr.splice(r, 1);\n    }\n    if (checkWin(result)) return initialFill();\n    return result;\n  }\n  const customStyle = {\n    display: \"grid\",\n    gridTemplateRows: `repeat(${Number(props.size) + 1}, 100px)`,\n    gridTemplateColumns: `repeat(${props.size}, 100px)`\n  };\n\n  function renderElement(item, index) {\n    return (\n      <Cell\n        key={index}\n        value={item}\n        index={index}\n        mdhandle={id => handleMousePressed(id)}\n        muphandle={id => handleMouseReleased(id)}\n        size={props.size}\n      />\n    );\n  }\n\n  return (\n    <div className=\"grid-container\" style={customStyle}>\n      {state.array.map((item, index) => renderElement(item, index))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React, { useState } from \"react\";\nimport Grid from \"./Grid/Grid\";\n\nfunction App() {\n  const [state, setState] = useState({\n    statusStyle: { display: \"none\" },\n    gridSize: 2\n  });\n\n  function winState() {\n    setState(prev => {\n      return {\n        ...prev,\n        statusStyle: {\n          display: \"\"\n        }\n      };\n    });\n  }\n\n  function onRangeChanged(event) {\n    const value = event.target.value;\n    console.log(value);\n    setState(prev => {\n      return {\n        statusStyle: { display: \"none\" },\n        gridSize: value\n      };\n    });\n  }\n\n  function getGrid() {\n    return <Grid size={state.gridSize} winstate={winState} />;\n  }\n\n  return (\n    <div className=\"container\">\n      {getGrid()}\n      {/* <Grid size={state.gridSize} winstate={winState} /> */}\n      <div className=\"status\" style={state.statusStyle}>\n        <div className=\"win-text\">You win!!</div>\n        {/* <div className=\"replay-text\">Replay</div> */}\n      </div>\n      <div className=\"level-text\">Difficulty</div>\n      <input\n        type=\"range\"\n        orient=\"vertical\"\n        min=\"2\"\n        max=\"4\"\n        value={state.gridSize}\n        onChange={evt => onRangeChanged(evt)}\n        name=\"difficulty\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}